# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import hook_pb2 as hook__pb2

GRPC_GENERATED_VERSION = '1.68.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in hook_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class HookHandlerStub(object):
    """The hook service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InvokeHook = channel.unary_unary(
                '/proto.HookHandler/InvokeHook',
                request_serializer=hook__pb2.HookRequest.SerializeToString,
                response_deserializer=hook__pb2.HookResponse.FromString,
                _registered_method=True)


class HookHandlerServicer(object):
    """The hook service definition.
    """

    def InvokeHook(self, request, context):
        """InvokeHook is invoked for every hook that is executed. HookRequest contains the
        corresponding information about the hook type, the involved upload, and
        causing HTTP request.
        The return value HookResponse allows to stop or reject an upload, as well as modifying
        the HTTP response. See the documentation for HookResponse for more details.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HookHandlerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InvokeHook': grpc.unary_unary_rpc_method_handler(
                    servicer.InvokeHook,
                    request_deserializer=hook__pb2.HookRequest.FromString,
                    response_serializer=hook__pb2.HookResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.HookHandler', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('proto.HookHandler', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class HookHandler(object):
    """The hook service definition.
    """

    @staticmethod
    def InvokeHook(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.HookHandler/InvokeHook',
            hook__pb2.HookRequest.SerializeToString,
            hook__pb2.HookResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
